name                   = scl
file_extensions []     = txt;

__variable  \= (?:[_a-zA-Z0-9]+:)?[_a-zA-Z0-9]+ 
__number    \= \d+(?:\.\d*)?
__assignment \= (?:($${__variable})((?:\[.*?\])*)(\s*:?=\s*))

styles [] {

.comment : style {
   textmate_scope = comment.line.number-sign
}

.text : style {
   textmate_scope = text
}

.option.text : style {
   textmate_scope = string.unquoted
}

.keyword : style {
   textmate_scope = keyword.control
}

.keyword.operator : style {
   textmate_scope = keyword.operator
}

.keyword.constant : style {
   textmate_scope = constant.language
}

.variable : style {
   textmate_scope = variable.other
}

.date : style {
   textmate_scope = constant.character
}

.string : style {
   textmate_scope = string.quoted
}

.number : style {
   textmate_scope = constant.numeric
}

.punctuation : style {
   textmate_scope = punctuation
}

.illegal : style {
   textmate_scope = invalid.illegal
}

}

contexts [] {

main : context {
   : inline_push {
      regex    \= (^\s*\?)
      styles [] = .punctuation;
      : eol_pop {}
      : include "statement" ;
   }
   
   : inline_push {
      regex    \= (^\s*>)
      styles [] = .punctuation;
      : eol_pop {}
      : include "option.text" ;
   }
   
   : include "comment" ;
   : include "text" ;
}

statement : context {
   : inline_push {
      regex    \= (BLOCK\s*)([_a-zA-Z0-9]+)
      styles [] = .keyword, .variable;
      : eol_pop {}
      : include "illegal" ;
   }
   
   : inline_push {
      regex    \= (INSERT\s*)($${__variable})
      styles [] = .keyword, .variable;
      : eol_pop {}
      : include "illegal" ;
   }
   
   : inline_push {
      regex    \= (SHOW\s*)([_a-zA-Z0-9]+)
      styles [] = .keyword, .variable;
      : eol_pop {}
      : include "illegal" ;
   }
   
   : inline_push {
      regex    \= (WATCH\s*)((?:https?:\/\/)?(?:www.)?youtu(?:be)?.[a-z]{2,6}\/watch\?v=(?:[-_a-zA-Z0-9]+))
      styles [] = .keyword, .variable;
      : eol_pop {}
      : include "illegal" ;
   }
   
   : inline_push {
      regex    \= (IF|ELSEIF|WHILE)
      styles [] = .keyword;
      : eol_pop {}
      : include "expression" ;
   }
   
   : inline_push {
      regex    \= (ELSE)
      styles [] = .keyword;
      : eol_pop {}
      : include "illegal" ;
   }
   
   : inline_push {
      regex    \= $${__assignment}?(ASK\s*ANSWERS?\s*(?:SHOW)?)
      styles [] = .variable, .punctuation, .punctuation, .keyword;
      : eol_pop {}
      : include "illegal" ;
   }
   
   : inline_push {
      regex    \= $${__assignment}?(ASK\s*(?:TEXT|DATE|NUMBER))
      styles [] = .variable, .punctuation, .punctuation, .keyword;
      : eol_pop {}
      : include "expression" ;
   }
   
   : inline_push {
      regex    \= $${__assignment}(FETCH\\s*)((?:[_a-zA-Z0-9]+:)?[_a-zA-Z0-9]+(?:\\s*,\\s*(?:[_a-zA-Z0-9]+:)?[_a-zA-Z0-9]+)*?)((?:\\s*OF)?)
      styles [] = .variable, .punctuation, .punctuation, .keyword, .variable, .keyword;
      : eol_pop {}
      : include "expression" ;
   }
   
   : inline_push {
      regex    \= $${__assignment}
      styles [] = .variable, .punctuation, .punctuation;
      : eol_pop {}
      : include "expression" ;
   }
   
   : include "illegal" ;
}

expression : context {
   : inline_push {
      regex    \= (\()
      styles [] = .punctuation;
      : pop {
         regex    \= (\))
         styles [] = .punctuation;
      }
      : include "expression" ;
   }
   
   : inline_push {
      regex    \= (\[)
      styles [] = .punctuation;
      : pop {
         regex    \= (\])
         styles [] = .punctuation;
      }
      : include "expression" ;
   }
   
   : inline_push {
      regex    \= (\{)
      styles [] = .punctuation;
      : pop {
         regex    \= (\})
         styles [] = .punctuation;
      }
      : include "expression" ;
   }
   
   : pattern {
      regex    \= (AND|OR|WHERE|AS|NOT|DATE|LENGTH|LOWER|UPPER|KEYS|LATEST|MAX|MIN|SUM|MEAN|SORT|GROUP|JOIN)
      styles [] = .keyword.operator;
   }
   
   : pattern {
      regex    \= (\+|-|\*|/|%|=|!=|>=|>|<=|<|:|,)
      styles [] = .punctuation;
   }
   
   : pattern {
      regex    \= (\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}Z)?)
      styles [] = .date;
   }
   
   : pattern {
      regex    \= ($${__number})
      styles [] = .number;
   }
   
   : pattern {
      regex    \= ("(?:\\"|[^"])*"|'(?:\\'|[^'])*')
      styles [] = .string;
   }
   
   : pattern {
      regex    \= (NULL|ONCE|THIS|NOW|TODAY|DAYS|HOURS|MINUTES|SECONDS)
      styles [] = .keyword.constant;
   }
   
   : pattern {
      regex    \= ($${__variable})
      styles [] = .variable;
   }
   
   : include "illegal";
}

comment : context {
   : pattern {
      regex    \= (#.*)
      styles [] = .comment;
   }
}

text : context {
   : inline_push {
      regex    \= (<<)
      styles [] = .punctuation;
      : pop {
         regex    \= (>>)
         styles [] = .punctuation;
      }
      : include "expression" ;
   }
   
   : pattern {
      regex    \= ([^\s]+)
      styles [] = .text;
   }
}

option.text : context {
   : inline_push {
      regex    \= (<<)
      styles [] = .punctuation;
      : pop {
         regex    \= (>>)
         styles [] = .punctuation;
      }
      : include "expression" ;
   }
   
   : pattern {
      regex    \= ([^\s]+)
      styles [] = .option.text;
   }
}

illegal : context {
   : pattern {
      regex    \= ([^\s]+)
      styles [] = .illegal;
   }
}
   
}
